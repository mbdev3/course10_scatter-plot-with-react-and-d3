(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const csvUrl ='https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/0e7a9b0a5d22642a06d3d5b9bcbad9890c8ee534/iris.csv';

  const useData = ()=>{
  const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = (d) => {
      d.sepal_length = +d.sepal_length;
         d.sepal_width = +d.sepal_width;
         d.petal_length = +d.petal_length;
         d.petal_width = +d.petal_width;
        
       
        return d;
      };
      d3.csv(csvUrl, row).then(setData );
    }, []);
  return data
  };

  const AxisBottom = ({
    xScale,
    innerHeight,
    tickFormat
  }) =>
    xScale.ticks().map((tickValue) => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(
        tickValue
      )},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', {
          style: { textAnchor: 'middle' }, y: innerHeight + 5, dy: "0.71rem" },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({yScale,innerWidth}) => yScale.ticks().map((tickValue) => (
            
              React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        			React.createElement( 'line', { x2: innerWidth }), " //y1=", yScale(tickValue), " y2=", yScale(tickValue),
              React.createElement( 'text', {
                key: tickValue, style: { textAnchor: 'end' }, x: -5, dy: ".32em" },
                tickValue
              )
      )
            
          ));

  const Marks = ({data,yScale,xScale,xValue,yValue,tooltipFormat,circleRadius}) => data.map((d) => (
            React.createElement( 'circle', { className: 'mark', cx: xScale(xValue(d)), cy: yScale(yValue(d)), r: circleRadius },
    
      React.createElement( 'title', null, tooltipFormat(xValue(d)) )
    )
          ));

  const width = window.innerWidth;
  const height = window.innerHeight;
  const margin = {
    top: 20,
    bottom: 60,
    right: 30,
    left: 100,
  };

  const App = () => {
    const data = useData();
    if (!data) {
      return React$1__default.createElement( 'pre', null, "loading.." );
    }
    const xValue = (d) => d.sepal_length;
    const xAxisLabel = 'Sepal length';
    
    const yValue = (d) => d.sepal_width;
      const yAxisLabel = 'Sepal width';
    
    const innerHeight =
      height - margin.top - margin.bottom;
    const innerWidth =
      width - margin.right - margin.left;
    
      const xScale = d3.scaleLinear()
      .domain(d3.extent(data,xValue))
      .range([0, innerWidth]).nice();
    
    const yScale = d3.scaleLinear()
      .domain(d3.extent(data,yValue))
      .range([0, innerHeight]);
     


    const siFormat = d3.format('.2s');
  const xAxisTickFormat = tickValue=>siFormat(tickValue).replace('G','B');
  const tooltipFormat = tickValue=>d3.format(",.2r")(tickValue).replace('G','B');
   

  return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', {
          transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( AxisBottom, {
            innerHeight: innerHeight, xScale: xScale, tickFormat: xAxisTickFormat }),
          React$1__default.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth }),
          React$1__default.createElement( 'text', {
            className: "label", textAnchor: "middle", x: innerWidth / 2, y: height - margin.bottom / 2 },
            xAxisLabel
          ),
          React$1__default.createElement( 'text', {
            className: "label", textAnchor: "middle", transform: `translate(${-margin.left / 2},${innerHeight / 2}) rotate(-90)` },
            yAxisLabel
          ),
          React$1__default.createElement( Marks, {
            data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, tooltipFormat: tooltipFormat, circleRadius: 10 })
        )
      )
    );
  };

  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,